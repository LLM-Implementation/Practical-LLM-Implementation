{
    "input_title": "Google Agent Development Kit (ADK) Quickstart: Build Your First Gemini AI Agent",
    "input_description": "üöÄ Get started with the new Google Agent Development Kit (ADK)! In this Python quickstart tutorial, we'll walk you through building your very first AI agent powered by Google's Gemini models.\n\nWhat is the Google Agent Development Kit (ADK)?\nADK is an open-source, flexible, and modular framework from Google designed for developing and deploying AI agents, with tight integration into the Google ecosystem and Gemini models.\n\nIn this video, you'll learn:\n*   Setting up your Python environment (venv) for ADK development.\n*   Installing the google-adk package using pip.\n*   Creating the basic project structure for your agent.\n*   Writing the core agent code (agent.py) including tool definitions (get_weather, get_current_time).\n*   Understanding the agent configuration (using Gemini 1.5 Flash model).\n*   Setting up your Google AI Studio API key in the .env file.\n*   Running the agent locally using the ADK Dev UI (`adk web`).\n*   Interacting with your first agent and seeing function calling in action!\n\nWe cover key concepts like agent tools, function calls, and basic prompt instructions within the ADK framework.\n\nüîó Useful Links:\n*   Official Google ADK Documentation & GitHub: https://google.github.io/adk-docs/\n\n‚è±Ô∏è Timestamps:\n00:00 - Intro to Google Agent Development Kit (ADK)\n00:36 - Quickstart Overview & Requirements\n00:50 - Step 1: Setup Environment & Install ADK (venv, pip install google-adk)\n01:03 - Step 2: Create Agent Project Structure (multi_tool_agent folder)\n01:14 - Creating __init__.py and agent.py\n01:26 - Agent.py Code Walkthrough (Imports, Tools: get_weather, get_current_time)\n01:47 - Defining the Root Agent (Name, Model: Gemini 1.5 Flash, Description, Instructions, Tools)\n02:22 - Creating the .env file\n02:30 - Step 3: Set up the Model (Google AI Studio API Key)\n02:48 - Getting the API Key from Google AI Studio\n03:00 - Adding API Key to .env file\n03:14 - Step 4: Run Your Agent (adk web & Dev UI)\n03:39 - Interacting with the Agent in the Dev UI\n03:50 - Demo: Asking for Weather (Function Call: get_weather)\n04:01 - Exploring Events in Dev UI\n04:24 - Demo: Asking for Time (Function Call: get_current_time)\n04:46 - Demo: Handling Variations (NYC vs New York) & Simple Prompt Engineering\n05:30 - Example: Tweaking Instructions for Better Recognition\n05:52 - Final Test with Updated Instructions\n06:07 - Wrap Up & Next Steps (Multi-Agent Teaser)\n\nüëç If you found this tutorial helpful, please hit the like button and subscribe for more AI agent content, including the upcoming video on multi-agent interactions with ADK!\nüí¨ Let me know in the comments what you think of Google ADK!\n\n#GoogleADK #GeminiAI #Python #AIAgent #GoogleAI #AgentDevelopmentKit #Tutorial #FunctionCalling #LLM",
    "input_tags": [
      "Google Agent Development Kit", "Google ADK", "ADK Python", "Gemini", "Gemini AI",
      "Google Gemini", "AI Agent", "Artificial Intelligence", "Python", "Python Tutorial",
      "AI Agent Framework", "Google AI", "Google AI Studio", "Function Calling", "Agent Tools",
      "Build AI Agent", "ADK Quickstart", "ADK Tutorial", "Open Source AI", "Large Language Model",
      "LLM", "VS Code", "Programming", "Coding", "Software Development", "pip install google-adk",
      "adk web"
    ],
    "supporting_docs": "## Video Analysis\n\nMain Topics:\n\nIntroduction to the Google Agent Development Kit (ADK).\n\nADK Quickstart guide walkthrough.\n\nEnvironment setup for ADK (Python virtual environment, pip installation).\n\nCreating an ADK agent project structure and necessary files (__init__.py, agent.py, .env).\n\nDefining agent tools (Python functions like get_weather, get_current_time).\n\nConfiguring the agent (defining name, model, description, instructions, tools).\n\nSetting up API credentials (using Google AI Studio API Key).\n\nRunning the ADK agent using the provided web UI (adk web).\n\nInteracting with the agent via the web UI, demonstrating function calling.\n\nModifying agent instructions to handle variations in user input (e.g., \"nyc\" vs \"New York\").\n\nKey Information/Takeaways:\n\nADK is an open-source AI agent framework from Google, integrated with Gemini and Google tools.\n\nIt allows developing and deploying AI agents.\n\nThe Quickstart guide provides steps to create a basic agent that uses tools (functions) to answer questions about weather and time.\n\nADK requires Python (3.9+ recommended) and environment setup.\n\nAgents are defined in Python scripts (agent.py) specifying model, tools, and instructions.\n\nAPI keys (e.g., from Google AI Studio) are needed for the LLM interaction and stored in an .env file.\n\nADK includes a development web UI (adk web) for easy testing and interaction.\n\nThe agent can interpret user queries, decide which tool (function) to call, extract parameters (like city names), and generate responses based on the tool's output.\n\nAgent instructions (prompts) can be customized to improve how the agent understands and handles user input variations.\n\nOverall Summary:\nThis video serves as a practical tutorial demonstrating how to get started with Google's Agent Development Kit (ADK). The presenter follows the official Quickstart guide, showing viewers how to set up their environment, create a simple multi-tool agent project, configure it with tools and instructions, add API credentials, and run/interact with the agent using the built-in web UI. The example agent can retrieve weather and time information for specified cities, and the video also shows how to modify the agent's instructions to improve its understanding of varied city name inputs.\n\nTone and Style:\n\nTone: Informative, instructional, practical, and generally clear. The presenter seems knowledgeable and guides the viewer through the process systematically.\n\nStyle: Screen recording walkthrough/tutorial. The style is hands-on, showing the exact commands typed and the resulting UI/code changes.\n\nTarget Audience:\nThe video is primarily intended for developers, particularly those familiar with Python, who are interested in building AI agents using Google's technologies like Gemini and the new Agent Development Kit. Viewers should have some comfort with command-line interfaces, IDEs (like VS Code), and basic concepts of AI/LLMs and APIs.\n\nStructure:\n\nIntroduction: Briefly introduce ADK and its purpose, state the goal of following the Quickstart.\n\nEnvironment Setup: Creating a virtual environment and installing ADK.\n\nProject Creation: Creating the necessary folder structure and Python/environment files.\n\nAgent Coding: Copying/pasting and explaining the code for __init__.py and agent.py (defining tools and the agent itself).\n\nConfiguration: Creating the .env file and explaining how to get/add the Google AI Studio API key.\n\nRunning the Agent: Using the adk web command to start the development server and UI.\n\nInteraction & Demonstration: Using the web UI to interact with the agent, ask questions, and observe the function calling mechanism and responses.\n\nModification & Improvement: Showing how to modify agent instructions to handle input variations (\"nyc\") and re-testing.\n\nConclusion: Summarizing the Quickstart completion, mentioning future topics (multi-agent), thanking the audience, and a call to subscribe.\n\n## Video Transcript\n\nHey everyone, welcome back to my channel. So, I think recently the Google just released an agent development kit, and it's an open source agent framework with the Gemini and Google. What is the agent development kit? It's for developing and deploying AI agents. I'm very interested in the multi-agent functionalities, like how do agents interact with each other? But before we're doing that, we're going to first get familiar with the agent development kit, and we're going to do some quick start.\n\nLike it recommends a local IDE like VS Code, which I'm going to be using with Python 3.9 and terminal access to run this quick application. So, let's go ahead and do that.\n\nFirst, we're going to set up the environment and install the ADK. What we will do is to create a virtual environment. Okay, we're going to install this Google ADK.\n\nNext, we're going to create our agent project. So the agent project will have the following structures. We're going to first create the multi tool agent folder. Next, we're going to type this command and try to write the code into the file.\n\nNext, we're going to create an agent.py file in the same folder.\n\nNext, we're going to copy and paste the following code into the agent.py script. So, before we're doing that, let's see what's going on here. So, it's importing the agent methods from the ADK. So basically it defines two functions, the get weather and get current time. And this part is the agent part. And what we're going to do is to have the name weather_time_agent, have the model Gemini 2.0 flash, and we have the description here. Agent to answer the question about time and weather in a city. And we push some instructions there. You are a helpful agent who can answer the user questions about the time and weather in a city. And also we define the tools here like the get_weather, get_current_time.\n\nNext, we're going to create the environment file in the same folder. So we create a .env file. And then, so, next, we're going to set up the model. So there's two options here using the Google AI Studio API key or the Google Cloud Vertex AI API key. I think the studio will be more straightforward, very simple way. Let's try it. Okay, so well, in this page, you can see that you can just create an API key and search a project, select that and create an API key in existing project. So we're going to copy paste the following arguments to the environment file. Okay, so you can see that it has, it tells the Google Gen AI whether to use the vertex AI. You just paste the key there.\n\nAlright. Next, we're going to run our agent. So, make sure that we are navigating to the parent director of the agent project. There are multiple ways to interact with that. I'm very interested in the ADK UI tool they developed. So let's just run this. So we can open the URL, usually something like this. Okay, cool. And then we just select the multi tool agent, and then we can just type anything here.\n\nSo let's see what kind of questions we can type. So, for example, check the weather in New York. It's get the weather in New York with the temperature 25 degrees Celsius. And it also can check the event. You can check different events and see the exactly what's happening here. So it's going to basically tells whether time agent determines the get weather function tool to process this query. And you can see the city arguments in the function call is got the New York City. How about time there? All right. We can also check that the weather time agent decides to use the get current time tool. And the arguments it recognizes New York. So, once the the tool gets processed, the response will be the current time in there, which is showing here.\n\nHow about this? Let's try some tricky one to see if that can handle the issue like um how about weather in NYC? Weather information for NYC is not available. So it somehow can have some feedback loop to ask users to make sure that you are asking the right questions. You can see that the event it recognized the NYC, but it's not, as you remember in our function, it's hard coded, so it won't recognize the NYC. But somehow it asks users to confirm that if it means like New York. And once I confirmed, it just somehow feed in the New York to the function call and get the response.\n\nSo actually, you know, from the agent, we can do tweak some instructions to let the model to recognize those variations. For example, please recognize the variations of city names and convert it to correct full name.\n\nLet's see if this going to work. Let's directly try this example NYC. I can now just recognize the NYC, get the response. How about New York City? All right. Time there? It also writes the time in the New York City.\n\nAll right. So that's the first agent using ADK. Congratulations. I think the next step we're going to do some advanced tutorial on the multi-agent things. Thanks for watching and hope you enjoy it. And please don't forget to subscribe to support the channel. And see you in the next video."
  }